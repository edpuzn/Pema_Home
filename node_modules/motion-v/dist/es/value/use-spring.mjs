import { watch, isRef } from "vue";
import { animateValue } from "../external/.pnpm/framer-motion@12.5.0/external/framer-motion/dist/es/animation/animators/MainThreadAnimation.mjs";
import { motionValue, frame, frameData } from "motion-dom";
import { isMotionValue } from "../utils/motion-value.mjs";
function toNumber(v) {
  if (typeof v === "number")
    return v;
  return parseFloat(v);
}
function useSpring(source, config = {}) {
  let activeSpringAnimation = null;
  const value = motionValue(
    isMotionValue(source) ? toNumber(source.get()) : source
  );
  let latestValue = value.get();
  let latestSetter = () => {
  };
  const stopAnimation = () => {
    if (activeSpringAnimation) {
      activeSpringAnimation.stop();
      activeSpringAnimation = null;
    }
  };
  const startAnimation = () => {
    const animation = activeSpringAnimation;
    if ((animation == null ? void 0 : animation.time) === 0) {
      animation.sample(frameData.delta);
    }
    stopAnimation();
    const springConfig = isRef(config) ? config.value : config;
    activeSpringAnimation = animateValue({
      keyframes: [value.get(), latestValue],
      velocity: value.getVelocity(),
      type: "spring",
      restDelta: 1e-3,
      restSpeed: 0.01,
      ...springConfig,
      onUpdate: latestSetter
    });
  };
  watch(() => {
    if (isRef(config)) {
      return config.value;
    }
    return config;
  }, () => {
    value.attach((v, set) => {
      latestValue = v;
      latestSetter = set;
      frame.update(startAnimation);
      return value.get();
    }, stopAnimation);
  }, { immediate: true });
  if (isMotionValue(source)) {
    source.on("change", (v) => {
      value.set(toNumber(v));
    });
  }
  return value;
}
export {
  useSpring
};
